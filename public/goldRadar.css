html, body {
  height: 100%;
  margin: 0;
  padding: 0;
  background-image: url("https://images.unsplash.com/photo-1473174038344-40656aad79bf?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&s=25d1cefd80c0ac85c31e04433d339319");
}
#map {
  height: 60%;
  width: 50%;
  position: absolute;
  left:25%;
  top:12%
}

#removeCurrent{
  position: absolute;
  left:47%;
  top:78%;
  font-size: 2em;
  background-color:green;
  color:white;
  border:none;
  border-radius: 5px;
}
#current-location{
  position: absolute;
  left:36%;
  top:2%;
  font-size: 2em;
  background-color:green;
  color:white;
  border:none;
  border-radius: 5px;
}
#yards{
  color:white;
  font-size: 2em;
}
/*#floating-panel {
  position: absolute;
  top: 10px;
  left: 25%;
  z-index: 5;
  background-color: #fff;
  padding: 5px;
  border: 1px solid #999;
  text-align: center;
  font-family: 'Roboto','sans-serif';
  line-height: 30px;
  padding-left: 10px;
}
.controls {
 margin-top: 10px;
 border: 1px solid transparent;
 border-radius: 2px 0 0 2px;
 box-sizing: border-box;
 -moz-box-sizing: border-box;
 height: 32px;
 outline: none;
 box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
}

#pac-input {
 background-color: #fff;
 font-family: Roboto;
 font-size: 15px;
 font-weight: 300;
 margin-left: 12px;
 padding: 0 11px 0 13px;
 text-overflow: ellipsis;
 width: 300px;
}

#pac-input:focus {
 border-color: #4d90fe;
}

.pac-container {
 font-family: Roboto;
}

#type-selector {
 color: #fff;
 background-color: #4d90fe;
 padding: 5px 11px 0px 11px;
}

#type-selector label {
 font-family: Roboto;
 font-size: 13px;
 font-weight: 300;
}
#target {
 width: 345px;
}*/










/*"use strict"
var marker1, marker2;
var poly, geodesicPoly;
var marker1location = {lat: 34, lng: -40.605};
initMap();
function initMap() {
  console.log("hello")
  var map = new google.maps.Map(document.getElementById('map'), {
    zoom: 4,
    center: {lat: 34, lng: -40.605},
    mapTypeId: 'satellite'
  });

  // map.controls[google.maps.ControlPosition.TOP_CENTER].push(
  //     document.getElementById('info'));
  var clickCount = 0;
  google.maps.event.addListener(map,'click',function(e){
        console.log("clicked@"+e.latLng);
        clickCount++;
        var newMarker = new google.maps.Marker({
          map: map,
          draggable: true,
          position: {lat: e.latLng.lat(), lng: -e.latLng.lat()}
        });
        console.log(clickCount);
    });
  marker1 = new google.maps.Marker({
    map: map,
    draggable: true,
    position: marker1location
  });

  marker2 = new google.maps.Marker({
    map: map,
    draggable: true,
    position: {lat: 48.857, lng: 2.352}
  });

  var bounds = new google.maps.LatLngBounds(
      marker1.getPosition(), marker2.getPosition());
  map.fitBounds(bounds);

  google.maps.event.addListener(marker1, 'position_changed', update);
  google.maps.event.addListener(marker2, 'position_changed', update);

  poly = new google.maps.Polyline({
    strokeColor: '#FF0000',
    strokeOpacity: 1.0,
    strokeWeight: 3,
    map: map,
  });

  geodesicPoly = new google.maps.Polyline({
    strokeColor: 'blue',
    //strokeOpacity: 1.0,
    //strokeWeight: 3,
    //geodesic: true,
    map: map
  });
  initAutocomplete(map)
  update();
}

function update() {
  var path = [marker1.getPosition(), marker2.getPosition()];
  poly.setPath(path);
  geodesicPoly.setPath(path);
  var heading = google.maps.geometry.spherical.computeHeading(path[0], path[1]);
  // document.getElementById('heading').value = heading;
  // document.getElementById('origin').value = path[0].toString();
  // document.getElementById('destination').value = path[1].toString();
}

function initAutocomplete(map) {

      // Create the search box and link it to the UI element.
      var input = document.getElementById('pac-input');
      var searchBox = new google.maps.places.SearchBox(input);
      map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

      // Bias the SearchBox results towards current map's viewport.
      map.addListener('bounds_changed', function() {
        searchBox.setBounds(map.getBounds());
      });

      // Listen for the event fired when the user selects a prediction and retrieve
      // more details for that place.
      searchBox.addListener('places_changed', function() {
        var places = searchBox.getPlaces();

        if (places.length == 0) {
          return;
        }

        // For each place, get the icon, name and location.
        var bounds = new google.maps.LatLngBounds();
        places.forEach(function(place) {
          if (!place.geometry) {
            console.log("Returned place contains no geometry");
            return;
          }

          if (place.geometry.viewport) {
            // Only geocodes have viewport.
            bounds.union(place.geometry.viewport);
          } else {
            bounds.extend(place.geometry.location);
          }
        });
        map.fitBounds(bounds);
      });
    }*/
